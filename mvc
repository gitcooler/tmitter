#! /usr/bin/env python
# -- coding:utf8 --
from django.shortcuts import render
from django.db import models
from django.shortcuts import get_object_or_404

from django.http import *

from hashlib import md5


def md5_encode(str):
    return md5.new(str).hexdigest()


# Create your views here.

def my_view(request):
    sentence = 'Welcome to my site.'
    output = _(sentence)
    return HttpResponse(output)


class User(models.Model):
    id = models.AutoField(primary_key=True)
    username = models.CharField('用户名', max_length=20)
    password = models.CharField('密码', max_length=20)
    realname = models.CharField('姓名', max_length=20)
    email = models.EmailField('Email')
    area = models.ForeignKey(Area, verbose_name='地区')
    face = models.ImageField('头像', upload_to='face/%Y/%m/%d', default='', blank=True)
    url = models.CharField('个人主页', max_length=200, default='', blank=True)
    about = models.TextField('关于我', max_length=1000, default='', blank=True)
    addtime = models.DateTimeField('注册时间', auto_now=True)
    friend = models.ManyToManyField("self", verbose_name='朋友')

    def __unicode__(self):
        return self.realname

    def addtime_format(self):
        return self.addtime.strftime('%Y-%m-%d %H:%M:%S')

    def save(self, modify_pwd=True):
        if modify_pwd:
            self.password = function.md5_encode(self.password)
        self.about = formatter.substr(self.about, 20, True)
        super(User, self).save()

    class Meta:
        verbose_name = u'用户'
        verbose_name_plural = u'用户'


def signup(request):
    _islogin = __is_islogin(request)
    if (_islogin):
        return HttpResponseRedirect('/')

    _userinfo = {
        'username': '',
        'password': '',
        'confirm': '',
        'realname': '',
        'email': '',
    }

    try:
        _userinfo = {
            'username': request.POST['username'],
            'password': request.POST['password'],
            'confirm': request.POST['confirm'],
            'realname': request.POST['realname'],

        }
        _is_post = True

    except (KeyError):
        is_post = False

    if (_is_post):
        _state = __do_signup(request, _userinfo)
    else:
        _state = {
            'success': False,
            'message': _('Signup')
        }
    if (_state['success']):
        return __result_message(request, _('Signup Successed'), \
                                _('Your account was registed success.'))

    _result = {
        'success': _state['success'],
        'message': _state['message'],
        'form': {
            'username': _userinfo['username'],
            'realname': _userinfo['realname'],
            'email': _userinfo['email'],
        }
    }

    # body content
    _template = loader.get_template('signup.html')
    _context = {
        'page_title': _('Signup'),
        'state': _result,
    }
    _output = _template.render(_context)
    return HttpResponse(_output)


def __is_login(request):
    return request.session.get('islogin', False)


def __do_signup(request, _userinfo):
    _state = {
        'success': False,
        'message': '',
    }
    # check username exist
    if (_userinfo['username'] == ''):
        _state['success'] = False
        _state['message'] = _('"username" have not inputed')
        return _state

    if (_userinfo['password'] == ''):
        _state['success'] = False
        _state['message'] = _('"Password" have not inputed.')
        return _state

    if (_userinfo['realname'] == ''):
        _state['success'] = False
        _state['message'] = _('"Real Name" have not inputed')
        return _state

    if (_userinfo['email'] == ''):
        _state['success'] = False
        _state['message'] = _('"Email" have not inputed')
        return _state

    # check username exist
    if (__check_username_exist(_userinfo['username'])):
        _state['success'] = False
        _state['message'] = _('"Username" have existed.')
        return _state

    # check password & confirm password
    if (_userinfo['password'] != _userinfo['confirm']):
        _state['success'] = False
        _state['message'] = _('"Confirm Password " have not match')
        return _state

    _user = User(
        username=_userinfo['username'],
        realname=_userinfo['realname'],
        password=_userinfo['password'],
        email=_userinfo['email'],
        area=Area.objects.get(id=1)
    )
    _user.save()
    return _state


def signin(request):
    # get user login status
    _islogin = __is_login(request)
    try:
        # get post params
        _username = request.POST['username']
        _password = request.POST['password']
        _is_post = True
    except(KeyError):
        _is_post = False

    # check username and password
    if _is_post:
        _state = __do_login(request, _username, _password)

        if _state['successs']:
            return __result_message(request, _('Login successed'), \
                                    ('You are logied now.'))
        else:
            _state = {
                'success': False
                'message': _('Please login first.')
            }
            # body content
    _template = loader.get_template('signin.html')
    _context = {
        'page_title': _('Signin'),
        'state': _state,
    }

    _output = _template.render(_context)
    return HttpResponse(_output)


def __do_login(request, _username, _password):
    _state = __check_login(_username, _password)
    if _state['success']:
        # save login info to session
        request.session['islogin'] = True
        request.session['userid'] = _state['userid']
        request.session['username'] = _username
        request.session['realname'] = _state['realname']
    return _state


def index_user_page(request, _username, _page_index):
    _userid = -1

    #根据页码数_page_index计算读取消息的索引范围
    _offset_index = (int(_page_index) - 1) * PAGE_SIZE
    _last_item_index = int(_page_index) * PAGE_SIZE
    ###
    _page_bar = formatter.pagebar(_notes, _page_index, _username)
    ###


    if _username !='':     #只获取某个用户的消息
        _user = get_object_or_404(User,username = _username)
        _userid = _user.id
        _notes = Note.objects.filter(user = _user).order_by('-addtime')

    else:
        _user = None       #获取所有用户的消息
        if _islogin:
            _query_users = [_login_user]
            _query_users.extend(_login_user.friend.all())
            _notes = Note.object.filter(user_in = _query_users).order_by('-addtime')

        else:
            _notes = []    #如未登录，则不允许查询


    #save message
    if _is_post:
        if not __is_login:
            return HttpResponseRedirect('/signin/')
        #获得来源字段，目前信息来源只有“网页”一种
        (_category,_is_added_cate) = Category.objects.get_or_create(name=u'网页')

        try:
            _user = User.objects.get(id = __user_id(request))

        except:
            return HttpResponseRedirect('/signin')

        #初始化模型类Note实例，并保存
        _note = Note(message = _message, category = _category, user = _user)
        _note.save()

        return HttpResponseRedirect('/user/' + _user.username)



def detail(request,_id):
        _islogin = __is_login(request)         #检查是否登录

        _note = get_object_or_404(Note, id = _id)

        #body content
        _template = loader.get_template('detail.html')

        _context = {
            'page_title' :_('%s\'s message %s ) % (_note.user.realname, _id),
            'item':_note,
            'islogin':_islogin,
            'userid':__user_id(request),
        }
        return HttpResponse(_output)

    _outp = _template.render(_context)

def users_index(request):
    return users_list(request,1)          #显示第一页的users_list

def users_list(request,_page_index=1):    #检查是否登录
    _islogin = __is_login(request)

    _page_title = _('Everyone')
    _users = User.objects.order_by('-addtime')


    _login_user = None
    _login_user_friend_list = None
    if _islogin:
        try:
            #获取当前用户
            _login_user = User.objects.get(
                id = __user_id(request)
            )
            #多对多关系查询所有朋友
            _login_user_friend_list = _login_user_friend_all()

        except:
            _login_user = None

    #分页
    _page_bar = formatter.pagebar(_users,_page_index,'',
                                  'control/userslist_pagebar.html')
    #计算当前页的起止记录
    _offset_index = (int(_page_index) -1)* PAGE_SIZE
    _last_item_index = PAGE_SIZE * int(_page_index)

    #获取当前页的用户
    _user = _user[_offset_index:_last_item_index]

    #body content
    _template = loader.get_template('users_list.html')

    _context = {
        'page_title' : _page_title,
        'users' : _users,
        'login_user_friend_list':_login_user_friend_list,
        'islogin':_islogin,
        'user_id':__user_id(request),
        'page_bar':_page_bar,
    }

    #渲染
    out_put = _template.render(_context)
    return HttpResponse(_output)


def friend_add(request,_username):
    #检查是否登录
    _islogin = __is_login(request)

    if(not _islogin):
        return HttpResponseRedirect('/singin/')

    _state = {
        "success" :False,
        "message" :"",
    }

    _user_id = __user_id(request)
    try:
        #获取当前用户
        _user = User.objects.get(id=_user_id)

    except:
        return __result_message(request, ('sorry'), ('This user does not exist.'))

    try:
        _friend = User.objects.get(username=_username)
        _user.friend.add(_friend)
        return __result_message(request,('Successed'), \
            ('%s and you are friend now')% _friend.realname)


    except:
        return __result_message(request,('Sorry'),('This user dose not exist.'))


def __result_message(request, _title=('Message'), \
                      _message = _('Unknow error, processing interrupted'),_go_back_url=''):
    _islogin = __is_login(request)

    if _go_back_url == '':
        _go_back_url = funciton.get_referer_url(request)

        _template = loader.get_template('result_message.html')

        _context = Context({
            'pagetitle' : _title,
            'message': _message,
            'go_bakc_url':_go_back_url,
            'islogin': _islogin
        })

        _output = _template.render(_context)
        return HttpResponse(_output)
